<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect data-type="rect" data-label="" data-x="0" data-y="0" x="121.27542623699927" y="253.50192398790966" width="29.554700449817915" height="132.99615202418067" fill="none" stroke="black" />
  <rect data-type="rect" data-label="" data-x="5" data-y="0" x="484.85981529380945" y="305.6323259497138" width="41.25343358164571" height="28.735348100572423" fill="none" stroke="black" />
  <rect data-type="rect" data-label="" data-x="-0.2" data-y="-1.0299999999999998" x="121.27542623699927" y="388.7146785458267" width="0" height="14.7773502249089" fill="none" stroke="black" />
  <rect data-type="rect" data-label="" data-x="-0.2" data-y="1.0299999999999998" x="113.88675112454477" y="236.50797122926437" width="14.777350224908972" height="14.777350224908957" fill="none" stroke="black" />
  <rect data-type="rect" data-label="" data-x="0" data-y="0" x="47.38867511245445" y="179.61517286336485" width="177.32820269890755" height="280.76965427327036" fill="rgba(0,0,255,0.05)" stroke="rgba(0,0,255,0.05)" />
  <rect data-type="rect" data-label="" data-x="0" data-y="0" x="113.88675112454477" y="246.1132488754552" width="44.33205067472689" height="147.77350224908957" fill="rgba(255,0,0,0.2)" stroke="rgba(255,0,0,0.2)" />
  <rect data-type="rect" data-label="" data-x="5" data-y="0" x="410.9730641692646" y="231.74557482516897" width="189.0269358307354" height="176.50885034966203" fill="rgba(0,0,255,0.05)" stroke="rgba(0,0,255,0.05)" />
  <rect data-type="rect" data-label="" data-x="5" data-y="0" x="477.47114018135494" y="298.2436508372593" width="56.03078380655472" height="43.51269832548144" fill="rgba(255,0,0,0.2)" stroke="rgba(255,0,0,0.2)" />
  <rect data-type="rect" data-label="" data-x="-0.2" data-y="-1.0299999999999998" x="47.38867511245445" y="314.82792742128186" width="147.77350224908963" height="162.5508524739986" fill="rgba(0,0,255,0.05)" stroke="rgba(0,0,255,0.05)" />
  <rect data-type="rect" data-label="" data-x="-0.2" data-y="-1.0299999999999998" x="113.88675112454477" y="381.3260034333722" width="14.777350224908972" height="29.554700449817915" fill="rgba(255,0,0,0.2)" stroke="rgba(255,0,0,0.2)" />
  <rect data-type="rect" data-label="" data-x="-0.2" data-y="1.0299999999999998" x="39.99999999999996" y="162.62122010471955" width="162.5508524739986" height="162.5508524739986" fill="rgba(0,0,255,0.05)" stroke="rgba(0,0,255,0.05)" />
  <rect data-type="rect" data-label="" data-x="-0.2" data-y="1.0299999999999998" x="106.4980760120903" y="229.1192961168099" width="29.55470044981793" height="29.554700449817915" fill="rgba(255,0,0,0.2)" stroke="rgba(255,0,0,0.2)" />
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 73.88675112454482,
        "c": 0,
        "e": 136.05277646190822,
        "b": 0,
        "d": -73.88675112454482,
        "f": 320
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>